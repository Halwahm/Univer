Callback - это функция, которая передается в другую функцию в качестве аргумента и вызывается после выполнения определенных операций.

Минусы использования коллбэков:
	Коллбэки могут привести к callback hell - ситуации, когда коллбэки вложены друг в друга настолько глубоко, что код становится трудным для чтения и понимания.
	Коллбэки могут привести к race conditions - ситуациям, когда результаты операций зависят от порядка их выполнения.
	Коллбэки могут привести к непредсказуемому поведению при возникновении ошибок.
Способы решения:
	Использование Promise.
	Использование async/await.

Promise - это объект, который представляет результат асинхронной операции. Он может находиться в трех состояниях: pending, fulfilled и rejected. Promise позволяет обрабатывать результаты асинхронных операций без использования коллбэков.

Promise может находиться в трех состояниях:
	pending: начальное состояние, когда Promise еще не выполнен.
	fulfilled: состояние, когда Promise успешно выполнен.
	rejected: состояние, когда Promise завершился с ошибкой.

Состояние Promise можно изменить только один раз. Это происходит при вызове метода resolve() или reject().

Значение Promise можно изменить только один раз. Это происходит при вызове метода resolve() или reject().

Цепочка промисов - это последовательность асинхронных операций, которые выполняются одна за другой. Каждая операция возвращает новый Promise, который используется для следующей операции в цепочке.

Два способа обработки ошибок в Promise:
	Использование метода catch().
	Использование блока try...catch внутри функции, которая возвращает Promise.

Метод Promise.all() используется для выполнения нескольких асинхронных операций параллельно и ожидания их завершения.

Методы Promise.race() и Promise.any() похожи тем, что они оба используются для выполнения нескольких асинхронных операций параллельно и ожидания первого завершения. Однако метод Promise.any() вернет результат первой успешно выполненной операции, а метод Promise.race() вернет результат первой завершившейся операции независимо от того, успешно она завершилась или нет.

Async/await - это синтаксический сахар для работы с промисами. Он позволяет писать асинхронный код так же, как синхронный код.