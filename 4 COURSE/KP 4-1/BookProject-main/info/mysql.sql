CREATE DATABASE BOOK;

CREATE TABLE AUTHORIZED (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_EMAIL VARCHAR(20) NOT NULL UNIQUE,
    PASSWORD VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE AUTHORS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    AUTHOR_NAME VARCHAR(25) NOT NULL UNIQUE
);

CREATE TABLE GENRE (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    GENRE_NAME VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE TAG (
    TAGID INT AUTO_INCREMENT PRIMARY KEY,
    TAG_NAME VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE USERS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_NAME VARCHAR(20) NOT NULL,
    USER_INFO TEXT,
    USER_AVATAR VARCHAR(256),
    ACCESS_LEVEL BIT DEFAULT 0 NOT NULL,
    DATA_CREATE DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
    ID_AUTHORIZED INT NOT NULL,
    FOREIGN KEY (ID_AUTHORIZED) REFERENCES AUTHORIZED(ID)
);

CREATE TABLE BOOKS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    BOOK_NAME TEXT NOT NULL,
    BOOK_STATUS BIT DEFAULT 0,
    BOOK_SERIES TEXT,
    ID_USER_ADD INT NOT NULL,
    BOOK_DESCRIPTION TEXT,
    BOOK_IMAGE TEXT,
    BOOK_FILE TEXT,
    CHAPTERS INT,
    DATA_RELEASE INT
);

CREATE TABLE BOOK_AUTHOR (
    BOOKID INT NOT NULL,
    AUTHORID INT NOT NULL,
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FOREIGN KEY (BOOKID) REFERENCES BOOKS(ID),
    FOREIGN KEY (AUTHORID) REFERENCES AUTHORS(ID)
);

CREATE TABLE BOOK_GENRE (
    BOOKID INT NOT NULL,
    GENREID INT NOT NULL,
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FOREIGN KEY (BOOKID) REFERENCES BOOKS(ID),
    FOREIGN KEY (GENREID) REFERENCES GENRE(ID)
);

CREATE TABLE BOOK_TAG (
    BOOKID INT NOT NULL,
    TAGID INT NOT NULL,
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FOREIGN KEY (BOOKID) REFERENCES BOOKS(ID),
    FOREIGN KEY (TAGID) REFERENCES TAG(TAGID)
);

CREATE TABLE FEEDBACK (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    ID_USER INT NOT NULL,
    ID_BOOK INT NOT NULL,
    FEEDBACK TEXT,
    RATING FLOAT NOT NULL CHECK (RATING >= 0 AND RATING <= 10),
    DATE DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY (ID_USER) REFERENCES USERS(ID),
    FOREIGN KEY (ID_BOOK) REFERENCES BOOKS(ID)
);

CREATE UNIQUE INDEX USERS_ID_AUTHORIZED_UINDEX ON USERS (
    ID_AUTHORIZED
);

CREATE TABLE USER_BOOKMARKS (
    USERID INT NOT NULL,
    BOOKID INT NOT NULL,
    STATUS_READING VARCHAR(25) NOT NULL,
    PRESENCE BIT DEFAULT 0 NOT NULL,
    DATA_READING DATETIME,
    DATA_ADD TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    MARKS INT,
    ID INT AUTO_INCREMENT PRIMARY KEY,
    FOREIGN KEY (USERID) REFERENCES USERS(ID),
    FOREIGN KEY (BOOKID) REFERENCES BOOKS(ID)
);

--Представления

--Представление для вывода информации о книге количество отзывов, средний рейтинг, количество пользователей, которые добавили книгу в закладки
CREATE VIEW BOOK_INFO AS
SELECT BOOKS.ID, COUNT(FEEDBACK.ID) AS COUNT_FEEDBACK, AVG(FEEDBACK.RATING) AS AVG_RATING, COUNT(USER_BOOKMARKS.ID) AS COUNT_BOOKMARKS
FROM BOOKS, FEEDBACK, USER_BOOKMARKS
WHERE BOOKS.ID = FEEDBACK.ID_BOOK AND BOOKS.ID = USER_BOOKMARKS.BOOKID;
